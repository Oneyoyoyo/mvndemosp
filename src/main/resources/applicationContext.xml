<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 开启注解 -->
	<context:component-scan base-package="com.jiyiren.mvnspdemo"></context:component-scan>
	
	<!-- 配置view层资源路径 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- 定义拦截器 -->
	<mvc:interceptors>
		<bean class="com.jiyiren.mvnspdemo.interceptor.AuthorizeInterceptor"></bean>
	</mvc:interceptors>
	
	<!-- 定义不要经过controller的路径页面，但一定要配置mvc:annotation-driven,否则其他controller中的路径无法访问 -->
	<!--  
	<mvc:view-controller path="/success" view-name="success"/>
	-->
	
	<!-- 静态资源访问问题 -->
	<mvc:default-servlet-handler/>
	
	<!-- 1.annotation-driven通常在工程项目中需要配置，有很多bean会被自动加载 -->
	<!-- 2.自定义类型转换器要在annotation-driven中配置，需要继承Converter<S,D>,实现其中的方法 
	<mvc:annotation-driven conversion-service="conversionService"/>
	-->
	<!-- 3.进行数据格式化，比如日期格式化时，也要加入此句，并且要在对应的bean里的date类型上，加注解@DateTimeFormat(pattern="yyyy-MM-dd") ;
	如果是number类型的如：Float等，则注解为@NumberFormat(pattern="#,###,###.#")
	错误信息保存在BindingResult result中。
	-->
	
	<!-- 4.数据校验 JSR303 bean中用注解校验，在需要验证处加@Valid-->
	<mvc:annotation-driven></mvc:annotation-driven>
	
	<!-- 自定义类型转换
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<ref bean="employeeConverter"/>
			</set>
		</property>
	</bean> -->
	
	<!-- 配置国际化资源文件 i18n.properties -->
	<!-- <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="i18n"></property>
	</bean> -->
	
	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="mappingJackson2HttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=utf8</value>
			</list>
		</property>
	</bean>
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJackson2HttpMessageConverter"/>
			</list>
		</property>
	</bean>
	
	<!-- 开启事务注解 -->
	<tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>
	<!-- 配置事务  -->
	<bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- jdbc实例 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 加载数据库配置文件 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:db-config.properties"></property>
	</bean>
	
	<!-- 数据库源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${username}"></property>
		<property name="password" value="${password}"></property>
		<property name="driverClass" value="${driver}"></property>
		<property name="jdbcUrl" value="${url}"></property>
		<!-- 指定连接池的初始化连接数  取值应在minPoolSize 与 maxPoolSize 之间.Default:3-->
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
        <!-- 指定连接池中保留的最大连接数. Default:15-->
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
        <!-- 指定连接池中保留的最小连接数-->
        <property name="minPoolSize" value="${jdbc.minPoolSize}"/>
        <!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0-->
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3-->
        <property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>
        <!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。
        但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0-->
        <property name="maxStatements" value="${jdbc.maxStatements}"/>
        <!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->
        <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!--配置mybatis全局配置文件:mybatis-config.xml-->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- 自动扫描entity包，使用别名 -->
		<property name="typeAliasesPackage" value="com.jiyiren.mvnspdemo.bean.domodel"></property>
		<!-- 自动扫描mapper的映射文件包路径 -->
		<property name="mapperLocations" value="classpath:com/jiyiren/mvnspdemo/mapping/*.xml" />
	</bean>
	
	<!-- 避免单独创建每一个mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jiyiren.mvnspdemo.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- 单独配置一个Mapper -->
	<!-- <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
		<property name="mapperInterface" value="org.mybatis.spring.sample.mapper.UserMapper" 
		/> <property name="sqlSessionFactory" ref="sqlSessionFactory"></property> 
		</bean> -->
</beans>
